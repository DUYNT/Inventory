<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        ">

    <!-- Properties place holder config -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" lazy-init="false">
        <property name="locations">
           <list>
               <value>WEB-INF/jdbc/database.properties</value>
               <value>classpath:mail.properties</value>
               <value>classpath:filepath.properties.xml</value>
           </list>
        </property>
    </bean>
    
    <!-- [jdbc/database.properties]の設定値をdataSourceにインジェクション -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="validationQuery" value="SELECT 1"/>
        <property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
        <property name="maxIdle" value="${jdbc.maxIdle}" />
        <property name="maxWait" value="${jdbc.maxWait}" /> <!-- 10000ミリ秒 = 10秒コネクション取得を待つ 取得できなければ例外 -->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}" /> <!-- 長時間接続されており（クローズ漏れ）の疑いがある場合に、強制解放する。  -->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" /> <!-- 強制解放されるまでの時間（秒） 60秒 × 60分 = 3600  -->
    </bean>

    <!-- Transaction manager -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- The transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- all methods starting with [get, select, search, list, export] are read-only -->
            <tx:method name="get*"      read-only="true" />
            <tx:method name="check*"    read-only="true" />
            <tx:method name="select*"   read-only="true" />
            <tx:method name="search*"   read-only="true" />
            <tx:method name="list*"     read-only="true" />
            <tx:method name="export*"   read-only="true" />
            <!-- all methods starting with [create, insert, update, del, import]
                 propagation="REQUIRED" isolation="DEFAULT" read-only="false" rollback-for="Throwable" -->
            <tx:method name="create*"   propagation="REQUIRED" isolation="DEFAULT" read-only="false" rollback-for="Throwable" />
            <tx:method name="insert*"   propagation="REQUIRED" isolation="DEFAULT" read-only="false" rollback-for="Throwable" />
            <tx:method name="update*"   propagation="REQUIRED" isolation="DEFAULT" read-only="false" rollback-for="Throwable" />
            <tx:method name="del*"      propagation="REQUIRED" isolation="DEFAULT" read-only="false" rollback-for="Throwable" />
            <tx:method name="import*"   propagation="REQUIRED" isolation="DEFAULT" read-only="false" rollback-for="Throwable" />
            <tx:method name="register*"   propagation="REQUIRED" isolation="DEFAULT" read-only="false" rollback-for="Throwable" />
        </tx:attributes>
    </tx:advice>

    <!-- Ensure that the above transactional advice runs for any execution
         of an operation defined by the FooService interface -->
    <aop:config>
        <aop:pointcut id="logicOperation" expression="execution(* com.tecapro.inventory.*.logic.impl.*LogicImpl.*(..))"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="logicOperation"/>
    </aop:config>

    <!-- Define the SqlSessionFactory, notice that configLocation is not needed when you use MapperFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="WEB-INF/sql/SqlMapConfig.xml" />
    </bean>
    
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>

    <!-- Bean Auto wired annotation configuration -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <!-- Import Spring configuration common -->
    <import resource="common_applicationContext.xml"/>

    <!-- Import spring configuration for package to bellow -->
    <import resource="app/login_applicationContext.xml"/>
    <import resource="app/home_applicationContext.xml"/>
    <import resource="app/total_applicationContext.xml"/>
    <import resource="app/store_applicationContext.xml"/>
    <import resource="app/category_applicationContext.xml"/>
    <import resource="app/report_applicationContext.xml"/>
    <import resource="app/inventory_applicationContext.xml"/>
    <import resource="app/station_applicationContext.xml"/>
    <import resource="app/user_applicationContext.xml"/>
    <import resource="app/authorities_applicationContext.xml"/>
     <import resource="app/popup_applicationContext.xml"/>
</beans>

